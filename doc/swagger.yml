openapi: 3.0.0
info:
  description: "This API handles a collection of movies and series for easy ordering along locations, type, categories."
  version: "xxx"
  title: "Porygon API"
  contact:
    name: "Aur√©lien Hugues"
    email: "me@aurelienhugues.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: http://localhost:4000/api/v1
    description: Dev server
  - url: https://api.porygon.aurelienhugues.com
    description: Production server

components:
  schemas:
    HealthStatus:
      properties:
        ApiVersion:
          type: string
          example: "0.4.1"
        database:
          type: object
          description: Status of the database connection
          properties:
            configured:
              description: True if the database is configured for the server
              type: boolean
            status:
              description: True if the server is connected to the database
              type: boolean
        keycloak:
          type: object
          description: Status of the authentication backend
          properties:
            configured:
              type: boolean
              description: True if the authentication backend is configured for the server
            used:
              description: True if the authentication backend is in use
              type: boolean
            status:
              description: True if the authentication backend is connected
              type: boolean
      required:
        - ApiVersion
        - database
        - keycloak
    StatusMessage:
      properties:
        code:
          type: integer
        userMessage:
          type: string
      required:
        - code
        - userMessage
    OutputCategory:
      properties:
        id:
          type: integer
        label:
          type: string
        description:
          type: string
      required:
        - id
        - label
        - description
    InputCategory:
      properties:
        label:
          type: string
        description:
          type: string
      required:
        - label
    OutputLocation:
      properties:
        id:
          type: integer
        location:
          type: string
        is_physical:
          description: True if the location is physical, False if digital
          type: boolean
      required:
        - id
        - location
        - is_physical
    InputLocation:
      properties:
        location:
          type: string
        is_physical:
          description: True if the location is physical, False if digital
          type: boolean
      required:
        - location
        - is_physical
    LocationStats:
      properties:
        id:
          type: integer
        location:
          type: string
        movie_count:
          type: integer
        serie_count:
          type: integer
      required:
        - id
        - location
        - movie_count
        - serie_count
    FullStats:
      properties:
        movie_count:
          type: integer
        serie_count:
          type: integer
        location_count:
          type: integer
        category_count:
          type: integer
      required:
        - movie_count
        - serie_count
        - location_count
        - category_count
    YearMoviesStats:
      properties:
        year:
          type: integer
        movie_count:
          type: integer
      required:
        - year
        - movie_count
    YearSeriesStats:
      properties:
        year:
          type: integer
        serie_count:
          type: integer
      required:
        - year
        - serie_count

paths:
  /healthcheck:
    get:
      summary: Get server status
      description: Get the current state of the server services status.
      tags:
        - meta
      responses:
        '200':
          description: The current state of the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '500':
          description: Unexpected error

  /categories:
    get:
      summary: Get list of categories
      description: Get the full list of categories with optional query parameters to limit the search
      tags:
        - categories
      parameters:
        - in: query
          name: 'attributes'
          description: List of attributes to return, separated by a comma
          schema:
            type: array
            items:
              enum:
                - label
                - description
                - id
              type: string
          style: form
          explode: false
        - in: query
          name: label
          description: Search parameter for the label
          schema:
            type: string
        - in: query
          name: sort
          description: Order to use for sorting
          schema:
            type: string
          examples:
            label:
              value: +label
              summary: Ascending order along label
            description:
              value: -description
              summary: Descending order along description
      responses:
        '200':
          description: A JSON array of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputCategory'
        '400':
          description: Invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 400
                userMessage: "Invalid field 'toto' in query"
        '500':
          description: Unexpected error
    post:
      summary: Create a new category
      tags:
        - categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputCategory'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 201
                userMessage: 'Category successfully created'
        '400':
          description: Invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 400
                userMessage: "Invalid field 'toto' in query"
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                    <html>
                    
                      <head>
                        <title></title>
                        <link rel="stylesheet" href="/stylesheets/style.css">
                      </head>
                      
                      <body>
                        <h1>Unauthorized field 'toto' in query</h1>
                        <h2>400</h2>
                        <pre></pre>
                      </body>
                  
                  </html>
        '500':
          description: Unexpected error
  /categories/{categoryId}:
    get:
      summary: Get specific category
      description: Get a category by its ID
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category to get
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputCategory'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 404
                userMessage: "Category with id 42 not found"
        '500':
          description: Unexpected error
    put:
      summary: Modify a category
      description: Modify the category with given id
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category to edit
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '205':
          description: Category modified
        '204':
          description: Category not modified
        '404':
          description: Category does not exist
        '400':
          description: Invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 400
                userMessage: "Invalid field 'toto' in query"
    delete:
      summary: Delete a category
      description: Delete the category with given id
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: ID of the category to delete
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Category successfully deleted
        '404':
          description: Category does not exist

  /locations:
    get:
      summary: Get list of locations
      description: Get the full list of locations
      tags:
        - locations
      responses:
        '200':
          description: A JSON array of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputLocation'
        '500':
          description: Unexpected error
    post:
      summary: Create a new location
      tags:
        - locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLocation'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 201
                userMessage: 'Location successfully created'
        '400':
          description: Invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 400
                userMessage: "Invalid field 'toto' in query"
            text/html:
              schema:
                type: string
                example: |
                  <!DOCTYPE html>
                    <html>
                    
                      <head>
                        <title></title>
                        <link rel="stylesheet" href="/stylesheets/style.css">
                      </head>
                      
                      <body>
                        <h1>Unauthorized field 'toto' in query</h1>
                        <h2>400</h2>
                        <pre></pre>
                      </body>
                  
                  </html>
        '500':
          description: Unexpected error
  /locations/{locationId}:
    get:
      summary: Get specific location
      description: Get a category by its ID
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          description: ID of the location to get
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputLocation'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 404
                userMessage: "Location with id 42 not found"
        '500':
          description: Unexpected error
    put:
      summary: Modify a location
      description: Modify the location with given id
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          description: ID of the location to edit
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '205':
          description: Location modified
        '204':
          description: Location not modified
        '404':
          description: Location does not exist
        '400':
          description: Invalid field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
              example:
                code: 400
                userMessage: "Invalid field 'toto' in query"
    delete:
      summary: Delete a location
      description: Delete the location with given id
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          description: ID of the location to delete
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: Location successfully deleted
        '404':
          description: Location does not exist
  /locations/count:
    get:
      summary: Count element in all locations
      description: Count number of movies and series in all locations
      tags:
        - locations
      responses:
        '200':
          description: A JSON array of location stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationStats'
        '500':
          description: Unexpected error
  /locations/{locationId}/count:
    get:
      summary: Count element in a location
      description: Count number of movies and series in a specific location
      tags:
        - locations
      parameters:
        - name: locationId
          in: path
          required: true
          description: ID of the location to edit
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: The stats for a single location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationStats'
        '404':
          description: Location does not exist
        '500':
          description: Unexpected error

  /stats:
    get:
      summary: Get complete stats for the database
      description: Get the number of all elements in the database
      tags:
        - stats
      responses:
        '200':
          description: Complete database stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullStats'
        '500':
          description: Unexpected error
  /stats/year/movies:
    get:
      summary: Get movie count by year
      description: Get the number of movies by year
      tags:
        - stats
      responses:
        '200':
          description: A JSON array of movies stats by year
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/YearMoviesStats'
        '500':
          description: Unexpected error
  /stats/year/series:
    get:
      summary: Get serie count by year
      description: Get the number of series by year
      tags:
        - stats
      responses:
        '200':
          description: A JSON array of series stats by year
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/YearSeriesStats'
        '500':
          description: Unexpected error